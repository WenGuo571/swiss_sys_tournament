-- Table definitions for the tournament project.
--
-- Put your SQL 'create table' statements in this file; also 'create view'
-- statements if you choose to use it.
--
-- You can write comments in this file by starting them with two dashes, like
-- these lines here.
DROP TABLE IF EXISTS MATCHES, PLAYERS, TOURNAMENTS CASCADE;

CREATE TABLE IF NOT EXISTS TOURNAMENTS (
  T_ID SERIAL PRIMARY KEY,
  T_NAME TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS PLAYERS (
  P_ID SERIAL PRIMARY KEY,
  P_NAME TEXT NOT NULL,
  WIN INT DEFAULT 0,
  MATCH INT DEFAULT 0,
  T_ID INT REFERENCES TOURNAMENTS(T_ID) ON DELETE CASCADE NOT NULL
);

CREATE TABLE IF NOT EXISTS MATCHES (
  P1 INT REFERENCES PLAYERS(P_ID) ON DELETE CASCADE,
  P2 INT REFERENCES PLAYERS(P_ID) ON DELETE CASCADE,
  WINNER INT REFERENCES PLAYERS(P_ID) ON DELETE CASCADE DEFAULT NULL,
  PRIMARY KEY (P1, P2)
);

CREATE OR REPLACE FUNCTION report_match(integer, integer, integer)
RETURNS void AS $$
BEGIN
  INSERT INTO MATCHES (P1, P2) VALUES ($1, $2);
  UPDATE PLAYERS SET MATCH = MATCH+1 WHERE P_ID = $1 or P_ID = $2;
  IF $3<>-1 THEN
    UPDATE PLAYERS SET WIN = WIN+1 WHERE P_ID = $3;
    UPDATE MATCHES SET WINNER = $3 WHERE P1 = $1 AND P2 = $2;
  END IF;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION create_summary()
RETURNS void AS $$
BEGIN
  CREATE OR REPLACE VIEW SUMMARY AS
  SELECT PLAYERS.P_ID, PLAYERS.P_NAME, PLAYERS.WIN, PLAYERS.MATCH, PLAYERS.T_ID
  FROM PLAYERS, (SELECT T1.P_ID, COALESCE(SUM(PLAYERS.WIN), 0) AS OWIN FROM
    (SELECT P_ID, P1, P2 FROM PLAYERS LEFT JOIN MATCHES
      ON P1!=P2 AND (P_ID=P1 OR P_ID=P2)) AS T1
    LEFT JOIN PLAYERS
      ON (P1!=T1.P_ID AND P1=PLAYERS.P_ID) OR (P2!=T1.P_ID AND P2=PLAYERS.P_ID)
  GROUP BY T1.P_ID) AS T2
  WHERE PLAYERS.P_ID = T2.P_ID ORDER BY PLAYERS.WIN DESC, T2.OWIN DESC;
END;
$$ LANGUAGE plpgsql;
